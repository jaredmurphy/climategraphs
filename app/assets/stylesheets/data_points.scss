// Place all the styles related to the DataPoints controller here.
// They will automatically be included in application.css.
// You can use Sass (SCSS) here: http://sass-lang.com/

.continents {
  display: none;
  width: 1200px;
  text-align: center;
  margin: 0 auto;
}

.continent_buttons  {
  display: none;
  text-align: center;
  margin: 0 auto;
  padding: 0;
  overflow: auto
}
.continent_buttons li {
  list-style: none;
  display: inline;
  float: left;
}
.continent_button {
  list-style: none;
  display: inline;
  float: left;

}

#graph {
	overflow:visible;
}

#global {
 overflow:visible;
}

#highcharts-0 {
overflow:visible;
}
.earth {
  margin: 5% auto;
  text-align:center;
  width: 300px;
  height: 300px;
  background: url(http://www.noirextreme.com/digital/Earth-Color4096.jpg) repeat-x;
  border-radius: 50%;
  background-size: 610px;
  box-shadow: inset 8px 36px 80px 20px rgb(0, 0, 0), inset -6px 0 12px 4px rgba(255, 255, 255, 0.3);
  animation-name: rotate;
  animation-duration: 51s;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}
@keyframes rotate {
  from {
    background-position: 0px 0px;
  }
  to {
    background-position: 610px 0px;
  }
}
.bgClicked {
    background-color: white;
    transition: all 1s;
}
.title {
   text-align: center;
}
p {
   color: black;
}

.heading {
    text-align: center;
    display: none;
    font-size: 77px;
   color:  #343838;
}
.sub_heading {
        text-align: center;
    display: none;
    font-size: 50px;
   color:  #005f6b;
}

.sub_sub_heading {
        text-align: center;
    display: none;
    font-size: 30px;
   color:  #008c9e;
}
svg .state_select {
    display: none;
    fill: #008c9e;
    stroke: white;
 }

.state state_select 
{
	fill:#008c9e;
	stroke:#646464;
	stroke-width:1;
	stroke-opacity:1;
}

.territory
{
	opacity:0;
	fill:#E0E0E0;
	stroke:#646464;
	stroke-width:1;
	stroke-opacity:1;
}

.territoryborder
{
	opacity:0;
	fill:none;
	stroke:#A9A9A9;
	stroke-width:2;
}

.border
{
	opacity:1;
	fill:none;
	stroke:#A9A9A9;
	stroke-width:2;
}

.circle
{
   opacity:1;
   fill:#008c9e;
   stroke:#646464;
   stroke-width:1;
}

@import url(http://fonts.googleapis.com/css?family=Open+Sans:800);

// How many menu items do we have?
$menu-items: 3;

// Colours
$background-color: #121212;
$indicator-color: #00dffc;

// Transition Speed
$transition-speed: 1.3s;

// Dynamic Variables
$width: (100/$menu-items) * 1%; // makes each item the right size
$menu-items-loop-offset: $menu-items - 1; // the number of items in the menu


// ======================================================
// Step 1 - Making a Fixed Width Navigation
// ======================================================

.PrimaryNav {
  @extend %cf; // clear the floats
  list-style: none;
  margin: 25px auto;
  max-width: 720px; // As all measurements are using % this could be a flexible value.
  padding: 0;
  width: 100%;
  visibility: hidden;
}

.Nav-item {
  background: #fff;
  display: block;
  float: left;
  margin: 0;
  padding: 0;
  width: $width; //dynamic width
  text-align: center;

  &:first-child {
    border-radius: 3px 0 0 3px;
  }

  &:last-child {
    border-radius: 0 3px 3px 0;
  }

  &.is-active a {
    color: $indicator-color;
  }

  a {
    color: $background-color;
    display: block;
    padding-top: 20px;
    padding-bottom: 20px;
    text-decoration: none;

    &:hover {
      color: $indicator-color;
    }
  }
}


// ======================================================
// Step 2 - Making the pseudo indicator
// ======================================================

.with-indicator {
  position: relative;// the menu is "relative" to the absolute position last-child pseudo elements.
  z-index: 0;

  .Nav-item {
    // ======================================================
    // Step 2.1 - Making the indicator with the pseudo element.
    // ======================================================
    &:last-child {
      &:before, &:after {
        content: '';
        display: block;
        position: absolute;
        pointer-events: none;
        transition: left #{$transition-speed} ease;
      }
      // Making the top CSS Triangle - learn more: http://css-tricks.com/animation-css-triangles-work/
      &:before {
        border: 6px solid transparent;
        border-top-color: $indicator-color;
        width: 0;
        height: 0;
        top: 0;
        left: ($width/2);
        margin-left: -3px;
      }
      &:after {
        background: $indicator-color;
        top: -6px;
        bottom: -6px;
        left: 0;
        width: $width;
        z-index: -1;
      }


    }

  }

  @for $i from 1 through $menu-items-loop-offset {
    // when the Nav item "is active", make the indicator line up with the navigation item.
    .Nav-item:nth-child(#{$i}).is-active ~ .Nav-item:last-child:after {
      left:($width*$i)-$width;
    }
    .Nav-item:nth-child(#{$i}).is-active ~ .Nav-item:last-child:before
    {
      left:($width*$i)+($width/2)-$width; // this ensures the triangle lines up to the menu.
    }
}

// ======================================================
// Step 3 - Making it move
// ======================================================

    // This could be in the same loop as the above but for the tutorial steps it's not
    @for $i from 1 through $menu-items-loop-offset {
    // We have to use !important to make the hovers overide if the last:child is the active or hovered
    .Nav-item:nth-child(#{$i}):hover ~ .Nav-item:last-child:after {
      left:($width*$i)-$width !important;
    }

    .Nav-item:nth-child(#{$i}):hover ~ .Nav-item:last-child:before{
      left:($width*$i)+($width/2)-$width !important;
    }
      
  }
    
    // this could be nested in the original .Nav-item
    .Nav-item {
        &:last-child {
          // make sure the last-child talks to itself
          &:hover, &.is-active {
            &:before {
             // we have to use important because the sibling selctor is more specific.
              left: (100%-$width)+($width/2) !important;
            }
            &:after{
              left: 100%-$width !important;
            }
          }        
        }
    }

}


// ======================================================
// The usual Global resets
// ======================================================

*, *:before, *:after {
  box-sizing: border-box; // learn more: http://css-tricks.com/box-sizing/
}

// Extending the http://css-tricks.com/micro-clearfix/
%cf:before,
%cf:after {
    content: " ";
    display: table;
}
%cf:after {
    clear: both;
}

// Presentation Styling

html {
  font-family: 'Open Sans', sans-serif;
  font-weight: 800;
}

.toggle {
    color: #fff;
    font-family: sans-serif;
    text-align: center;
}
.audio {
    visibility: hidden;
}
